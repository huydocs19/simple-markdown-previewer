{"version":3,"sources":["components/Editor.js","components/Preview.js","store.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","props","handleChange","bind","fullscreen","this","makeFullscreen","event","addText","target","value","previewFullscreen","editorFullscreen","id","className","onClick","style","height","text","onChange","Component","DOMPurify","require","window","hljs","marked","Preview","options","breaks","highlight","code","lang","language","getLanguage","minHeight","dangerouslySetInnerHTML","__html","sanitize","ADD","FULL_SCREEN","defaultState","store","createStore","state","action","newState","Object","assign","type","newText","componentName","mapStateToProps","mapDispatchToProps","dispatch","EditorContainer","connect","PreviewContainer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.444bece2.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Editor extends Component {\r\n    constructor(props) {\r\n        super(props); \r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.fullscreen = this.fullscreen.bind(this);\r\n    }\r\n    \r\n    fullscreen() {         \r\n        this.props.makeFullscreen(\"Editor\");  \r\n    }\r\n    handleChange(event) {         \r\n        this.props.addText(event.target.value);\r\n    }\r\n    render() { \r\n        if (this.props.previewFullscreen) {\r\n            return (<div></div>);\r\n          }\r\n        if (this.props.editorFullscreen) {\r\n        return (\r\n            <div id=\"editorContainer\" className=\"container center\" >\r\n                <h4><i className=\"fab fa-free-code-camp\"></i><span>Editor</span> <i className=\"fas fa-expand-arrows-alt\" onClick={this.fullscreen}></i></h4>\r\n                <textarea id=\"editor\" className=\"form-control\" style={{height: \"100vh\"}} value={this.props.text} onChange={this.handleChange}>\r\n                \r\n                </textarea>\r\n            </div>\r\n            ); \r\n        }\r\n        return (\r\n            <div id=\"editorContainer\" className=\"container center\">\r\n                <h4><i className=\"fab fa-free-code-camp\"></i><span>Editor</span> <i className=\"fas fa-expand-arrows-alt\" onClick={this.fullscreen}></i></h4>\r\n                <textarea id=\"editor\" className=\"form-control\" style={{height: 200}} value={this.props.text} onChange={this.handleChange}>\r\n                \r\n                </textarea>\r\n            </div>\r\n            \r\n            );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nconst DOMPurify = require('dompurify')(window);\r\n\r\n\r\nconst hljs = require('highlight.js');\r\nconst marked = require('marked');\r\nexport default class Preview extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.fullscreen = this.fullscreen.bind(this);\r\n  }\r\n  fullscreen() {\r\n    this.props.makeFullscreen(\"Preview\");   \r\n  }\r\n  render() { \r\n    let options = {breaks: true, highlight: function(code, lang) {          \r\n    const language = hljs.getLanguage(lang) ? lang : 'javascript';\r\n    return hljs.highlight(code, { language }).value;\r\n\r\n    }};  \r\n    if (this.props.editorFullscreen) {\r\n      return (<div></div>);\r\n    }\r\n    if (this.props.previewFullscreen) {\r\n      return (\r\n        <div id=\"previewContainer\" className=\"container\" style={{minHeight: \"100vh\"}}>\r\n          <h4><i className=\"fab fa-free-code-camp\"></i><span>Previewer</span> <i className=\"fas fa-expand-arrows-alt\" onClick={this.fullscreen}></i></h4> \r\n          \r\n          <div id=\"preview\" dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(marked(this.props.text, options))}}></div>\r\n        </div>\r\n        ); \r\n    }\r\n    return (\r\n          <div id=\"previewContainer\" className=\"container\" style={{minHeight: 200}}>\r\n            <h4><i className=\"fab fa-free-code-camp\"></i><span>Previewer</span> <i className=\"fas fa-expand-arrows-alt\" onClick={this.fullscreen}></i></h4> \r\n            \r\n            <div id=\"preview\" dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(marked(this.props.text, options))}}></div>\r\n          </div>\r\n          );\r\n  }\r\n}\r\n","import {connect} from 'react-redux';\r\nimport { createStore} from 'redux';\r\nimport Editor from './components/Editor';\r\nimport Preview from './components/Preview';\r\n\r\nconst ADD = 'ADD';\r\nconst FULL_SCREEN = 'FULL_SCREEN';\r\nconst defaultState = {\r\n    text: \"\",\r\n    previewFullscreen: false,\r\n    editorFullscreen: false\r\n\r\n};\r\nconst addText = (newText) => {\r\n  return {\r\n    type: ADD,\r\n    newText: newText\r\n  }\r\n};\r\nconst makeFullscreen = (componentName) => {\r\n  return {\r\n    type: FULL_SCREEN,\r\n    componentName: componentName\r\n  }\r\n}\r\n\r\nconst textReducer = (state = defaultState, action) => {\r\n  let newState = Object.assign({}, state);\r\n  switch (action.type) {\r\n    case ADD:\r\n      newState[\"text\"] = action.newText;\r\n      return newState;\r\n    case FULL_SCREEN:\r\n      if (action.componentName === \"Editor\") {\r\n        newState[\"editorFullscreen\"] = !newState.editorFullscreen; \r\n      } else if (action.componentName === \"Preview\") {\r\n        newState[\"previewFullscreen\"] = !newState.previewFullscreen;\r\n      }\r\n      return newState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const store = createStore(textReducer);\r\nconst mapStateToProps = (state) => {\r\n    return {text: state.text, editorFullscreen: state.editorFullscreen, previewFullscreen: state.previewFullscreen}\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\nreturn {\r\n    addText: (text) => {\r\n    dispatch(addText(text))\r\n    },\r\n    makeFullscreen: (componentName) => {\r\n      dispatch(makeFullscreen(componentName))\r\n    }\r\n}\r\n};\r\n    \r\nexport const EditorContainer = connect(mapStateToProps, mapDispatchToProps)(Editor);\r\nexport const PreviewContainer = connect(mapStateToProps, mapDispatchToProps)(Preview);","import './App.css';\nimport { Provider } from 'react-redux';\nimport { EditorContainer, PreviewContainer, store } from './store';\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <EditorContainer />\n      <PreviewContainer />\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}